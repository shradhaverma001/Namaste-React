REDUXðŸš€

1) Use of Redux is not mandatory.
2) use for handling state of the application.
3) application becomes easier to debug.

REDUX TOOLKIT(RTK)ðŸš€
- New and easier way of using redux.

Redux toolkit(redux)ðŸš€
It is a whole big JS object which can be directly accessed by any components from anywhere.
It okay to store all the data inside one object, but for easy understanding, we logically divide the object into pieces called slices.
eg - cart slice, user slice, etc.

We cannot directly modify the slices.

Trying to make the cart working - i.e, when we click on the item to add it to the cart, it will add that item to the cart to procedd to buy.
For eg, if we want to modify the cart slice, by clicking on the add button.

PROCESS FOLLOWED WHILE ADDING (WRITE) DATA TO A SLICEðŸš€
- When we click on the add button, 
it "DISPATCHES AN ACTION, THAT ACTION WILL CALL A FUNCTION AND THIS FUNCTION WILL INTERNALLY MODIFIES THAT CART(SLICE)".
- This function is called as "REDUCER"

PROPER DEFINATION -> When u press the add button, it dispatches an action, which calls a reducer function which updates/modifies the slice of the redux store.

ADD -----> A------> fn() ------> CART
        Dispatch    Reducer        Slice
        (ACTION)

PROCESS FOLLOWED WHILE READING DATA TO A SLICEðŸš€
- SELECTOR is used to read data from the redux store.
- And this phenomenon is known as "SUBSCRIBING TO THE STORE".
- SELECTOR will read the data and return it to the component.

- Let say whenever we add anything to the cart, the cart icon in the header should display no of items in the cart automatically.
- so it will read the data from the store.
- so we can say that Header compenent is "subscribed to the store" using a "selector".

INSTALL redux toolkit and react reduxðŸš€
- npm install @reduxjs/toolkit
- npm i react-redux

items that are taken by the slice - 
1) name - name of the slice
2) initialState - initialState state of the slice (like its an empty array or whatever the initial state is)
3) reducer - is an object which contains actions that we can take. (eg - addItem, removeItem)
each action will call a reducer function. 
NOTEðŸš€- We are mutating our state in the actions. means directly changing the state itself.

What a slice returns or exportsðŸš€-
A slice return an object containing two things - action and reducer
{
        actions: {
                additem, removeitems etc 
        },
        reducer
}

so we export 2 things from slice.
action (which we destructure and a reducer).

If u want to modify a store (with the slices), it also has a big reducer- which modifies the appstore (the STORE) 

add each slice reducer like this -
reducer: {
        cart: cartReducer,
        user: userReducer
} 


TO READ DATA FROM STOREðŸš€(SUBSCRIBING TO THE STOREðŸš€)

We use a hook called "useSelector" to subscribe to the store. 

IMPORTANT INTERVIEW QUESTIONSðŸš€
1) Whenever you are subscrib ing to the store, make sure u subscribe to the right portion of the store, 
otherwise it will lead to performance loss. (website will become slow).
2) don't get confused between reducer, reducers etc.
 - in appstore, its a whole big "reducer" which will consits of small other reducer.
 - in slice, it will contain a lot of "reducers"
 - while exporting, it will export one "reducer" which will be the combination of any of the slice reducer functions.
 - redux uses immer librrary brhind the scenes.
 