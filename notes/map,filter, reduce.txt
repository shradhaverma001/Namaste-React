// Namaste JS - map(), filter(), reduce() video

=> map()
map functions are used to transform an array. It transforms each and every element of an array and get a new array out of it.

const arr = [5, 1, 3, 2, 6];
const double = [10, 2, 6, 4, 12];
const triple = [15, 3, 9, 6, 18];
const binary = ["101", "1", "11", "10", "110"];

Syntax - 
const output = arr.map(function);

this function will be the logic which needs to be applied on each element of array.

function double(x) {
    return x*2;
}
const output = arr.map(double);

OR

function binary(x) {
    return x.toString(2);
}
const output = arr.map(binary);

ANOTHER WAY (ARROW FUNCTiONS)
const output = arr.map((x) => x.toString(2));
console.log(output);

ONE MORE IMPORTANT THING FOR map()
=> If map takes 2 parameters, then one is treated as element and the other as index of that element.
Eg -
let arr = [1,2,3];
let res = arr.map((x,i)=>{ return x + i;});
console.log(res);

REMEMBER TO ASSIGN THAT MAP METHOD TO A RESULTANT VARIABLE, THEN PRINT THE RESULTANT VARIABLE.

=> filter()
filter is used to filter the contents.

Syntax - 
const output = arr.filter(function);

// filter odd numbers
function isOdd(x) {
    return x % 2;
}

function isEven(x) {
    return x % 2 === 0;
}
const output = arr.filter(isOdd);

// filter greater than 4.
const output = arr.filter((x) => x > 4);
console.log(output);

OR
const output = arr.filter((x) => { return x > 4 });
console.log(output);

OR
const output = arr.filter((x) => (x > 4));
console.log(output);


=> reduce()
reduce is used to iterate over the array and returns a single value.
like if we are calculating sum, so it will addup all elements and return a single value.

Eg-
const arr = [5, 1, 3, 2, 6];
function findSum(arr) {
    let sum = 0;
    for(let i = 0; i < arr.length; i++){
        sum = sum + arr[i];
    }
    return sum;
}
console.log(findSum(arr));

for reduce -
It takes 2 arguments - one is function used to reduce, other is initial value of the accumulator(acc).
accumulator is basically the reduced value (sum in this case, which is storing result)
curr - current

Syntax - 
const output = arr.reduce(function (acc, curr) {
    acc = acc + curr;
    retun acc;
}, 0);
console.log(output);

// find max

function findMax(arr){
    let max = 0;
    for(let i = 0; i < arr.length; i++){
        if(arr[i] > max){
            max = arr[i];
        }
    }
    retun max;
}

reduce -
const output = arr.reduce(function (max, curr) {
    if(curr > max){
        max = curr;
    }
    return max;
}, 0);
console.log(output);


TRICKY EXAMPLES
const users = [
    {firstname: "akshay", lastname: "saini", age: 26},
    {firstname: "shradha", lastname: "verma", age: 23},
    {firstname: "elon", lastname: "musk", age: 50},
    {firstname: "sundar", lastname: "pichai", age: 60}
];

// display firstname and lastname together of each Object in list.
// list of full names

const output = users.map((x) => x.firstname + " " + x.lastname);
console.log(output);


// display how many person are of particular age
